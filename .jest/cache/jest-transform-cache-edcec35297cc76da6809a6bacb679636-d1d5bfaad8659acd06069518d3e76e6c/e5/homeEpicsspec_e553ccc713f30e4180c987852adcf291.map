{"version":3,"sources":["homeEpics.spec.ts"],"names":["describe","next","jest","fn","state$","dependencies","beforeEach","TestAssembly","gateway","fetchCharacters","mockReturnValue","action$","HomeViewActions","start","it","subscribe","expect","toBeCalled","charactersStub","toBeCalledWith","type","HomeActions","fetchCharacter","success","payload","Error","failure"],"mappings":"AACA;;AACA;;AACA;;AAEA;;AAIA;;AAEAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1B,MAAMC,IAAI,GAAGC,IAAI,CAACC,EAAL,EAAb;AAEA,MAAIC,MAAJ;AACA,MAAIC,YAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACfD,IAAAA,YAAY,GAAG,IAAIE,0BAAJ,EAAf;AACAF,IAAAA,YAAY,CAACG,OAAb,CAAqBC,eAArB,CAAqCC,eAArC,CAAqD,cAAG,KAAK,CAAR,CAArD;AACD,GAHS,CAAV;AAKAV,EAAAA,QAAQ,CAAC,iCAAD,EAAoC,YAAM;AAChD,QAAMW,OAAO,GAAG,cAAGC,6BAAgBC,KAAhB,EAAH,CAAhB;AAEAC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AAC1C,gCAAIH,OAAJ,EAAaP,MAAb,EAAqBC,YAArB,EAAmCU,SAAnC;AAEAC,MAAAA,MAAM,CAACX,YAAY,CAACG,OAAb,CAAqBC,eAAtB,CAAN,CAA6CQ,UAA7C;AACD,KAJC,CAAF;AAMAjB,IAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7Bc,MAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAM;AACrDT,QAAAA,YAAY,CAACG,OAAb,CAAqBC,eAArB,CAAqCC,eAArC,CACE,cAAGQ,8BAAH,CADF;AAIA,kCAAIP,OAAJ,EAAaP,MAAb,EAAqBC,YAArB,EAAmCU,SAAnC,CAA6Cd,IAA7C;AAEAe,QAAAA,MAAM,CAACf,IAAD,CAAN,CAAakB,cAAb,CAA4B;AAC1BC,UAAAA,IAAI,EAAEC,yBAAYC,cAAZ,CAA2BC,OAA3B,CAAmCH,IADf;AAE1BI,UAAAA,OAAO,EAAEN;AAFiB,SAA5B;AAID,OAXC,CAAF;AAYD,KAbO,CAAR;AAeAlB,IAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7Bc,MAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAM;AACrDT,QAAAA,YAAY,CAACG,OAAb,CAAqBC,eAArB,CAAqCC,eAArC,CACE,sBAAW;AAAA,iBAAM,IAAIe,KAAJ,CAAU,WAAV,CAAN;AAAA,SAAX,CADF;AAIA,kCAAId,OAAJ,EAAaP,MAAb,EAAqBC,YAArB,EAAmCU,SAAnC,CAA6Cd,IAA7C;AAEAe,QAAAA,MAAM,CAACf,IAAD,CAAN,CAAakB,cAAb,CAA4B;AAC1BC,UAAAA,IAAI,EAAEC,yBAAYC,cAAZ,CAA2BI,OAA3B,CAAmCN;AADf,SAA5B;AAGD,OAVC,CAAF;AAWD,KAZO,CAAR;AAaD,GArCO,CAAR;AAsCD,CAjDO,CAAR","sourcesContent":["import {StateObservable} from 'redux-observable';\nimport {of, throwError} from 'rxjs';\nimport {charactersStub} from '../stubs/charactersStub';\nimport {TestAssembly} from '../stubs/TestAssembly';\nimport {RootState} from '../../src/store/rootState';\nimport {\n  HomeActions,\n  HomeViewActions,\n} from '../../src/screens/HomeScreen/HomeActions';\nimport {homeEpics as sut} from '../../src/screens/HomeScreen/homeEpics';\n\ndescribe('homeEpics', () => {\n  const next = jest.fn();\n\n  let state$: StateObservable<RootState>;\n  let dependencies: TestAssembly;\n\n  beforeEach(() => {\n    dependencies = new TestAssembly();\n    dependencies.gateway.fetchCharacters.mockReturnValue(of(void 0));\n  });\n\n  describe('when HOME/START action received', () => {\n    const action$ = of(HomeViewActions.start());\n\n    it('fetchs characters using gateway', () => {\n      sut(action$, state$, dependencies).subscribe();\n\n      expect(dependencies.gateway.fetchCharacters).toBeCalled();\n    });\n\n    describe('when success', () => {\n      it('emits HOME/FETCH_CHARACTERS_SUCCESS action', () => {\n        dependencies.gateway.fetchCharacters.mockReturnValue(\n          of(charactersStub)\n        );\n\n        sut(action$, state$, dependencies).subscribe(next);\n\n        expect(next).toBeCalledWith({\n          type: HomeActions.fetchCharacter.success.type,\n          payload: charactersStub,\n        });\n      });\n    });\n\n    describe('when failure', () => {\n      it('emits HOME/FETCH_CHARACTERS_FAILURE action', () => {\n        dependencies.gateway.fetchCharacters.mockReturnValue(\n          throwError(() => new Error('any error'))\n        );\n\n        sut(action$, state$, dependencies).subscribe(next);\n\n        expect(next).toBeCalledWith({\n          type: HomeActions.fetchCharacter.failure.type,\n        });\n      });\n    });\n  });\n});\n"]}
39d5bb644b2c4fbb58880e4de389c5ff
var _rxjs = require("rxjs");

var _charactersStub = require("../stubs/charactersStub");

var _TestAssembly = require("../stubs/TestAssembly");

var _HomeActions = require("../../src/screens/HomeScreen/HomeActions");

var _homeEpics = require("../../src/screens/HomeScreen/homeEpics");

describe('homeEpics', function () {
  var next = jest.fn();
  var state$;
  var dependencies;
  beforeEach(function () {
    dependencies = new _TestAssembly.TestAssembly();
    dependencies.gateway.fetchCharacters.mockReturnValue((0, _rxjs.of)(void 0));
  });
  describe('when HOME/START action received', function () {
    var action$ = (0, _rxjs.of)(_HomeActions.HomeViewActions.start());
    it('fetchs characters using gateway', function () {
      (0, _homeEpics.homeEpics)(action$, state$, dependencies).subscribe();
      expect(dependencies.gateway.fetchCharacters).toBeCalled();
    });
    describe('when success', function () {
      it('emits HOME/FETCH_CHARACTERS_SUCCESS action', function () {
        dependencies.gateway.fetchCharacters.mockReturnValue((0, _rxjs.of)(_charactersStub.charactersStub));
        (0, _homeEpics.homeEpics)(action$, state$, dependencies).subscribe(next);
        expect(next).toBeCalledWith({
          type: _HomeActions.HomeActions.fetchCharacter.success.type,
          payload: _charactersStub.charactersStub
        });
      });
    });
    describe('when failure', function () {
      it('emits HOME/FETCH_CHARACTERS_FAILURE action', function () {
        dependencies.gateway.fetchCharacters.mockReturnValue((0, _rxjs.throwError)(function () {
          return new Error('any error');
        }));
        (0, _homeEpics.homeEpics)(action$, state$, dependencies).subscribe(next);
        expect(next).toBeCalledWith({
          type: _HomeActions.HomeActions.fetchCharacter.failure.type
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWVFcGljcy5zcGVjLnRzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwibmV4dCIsImplc3QiLCJmbiIsInN0YXRlJCIsImRlcGVuZGVuY2llcyIsImJlZm9yZUVhY2giLCJUZXN0QXNzZW1ibHkiLCJnYXRld2F5IiwiZmV0Y2hDaGFyYWN0ZXJzIiwibW9ja1JldHVyblZhbHVlIiwiYWN0aW9uJCIsIkhvbWVWaWV3QWN0aW9ucyIsInN0YXJ0IiwiaXQiLCJzdWJzY3JpYmUiLCJleHBlY3QiLCJ0b0JlQ2FsbGVkIiwiY2hhcmFjdGVyc1N0dWIiLCJ0b0JlQ2FsbGVkV2l0aCIsInR5cGUiLCJIb21lQWN0aW9ucyIsImZldGNoQ2hhcmFjdGVyIiwic3VjY2VzcyIsInBheWxvYWQiLCJFcnJvciIsImZhaWx1cmUiXSwibWFwcGluZ3MiOiJBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUlBOztBQUVBQSxRQUFRLENBQUMsV0FBRCxFQUFjLFlBQU07QUFDMUIsTUFBTUMsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBYjtBQUVBLE1BQUlDLE1BQUo7QUFDQSxNQUFJQyxZQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZELElBQUFBLFlBQVksR0FBRyxJQUFJRSwwQkFBSixFQUFmO0FBQ0FGLElBQUFBLFlBQVksQ0FBQ0csT0FBYixDQUFxQkMsZUFBckIsQ0FBcUNDLGVBQXJDLENBQXFELGNBQUcsS0FBSyxDQUFSLENBQXJEO0FBQ0QsR0FIUyxDQUFWO0FBS0FWLEVBQUFBLFFBQVEsQ0FBQyxpQ0FBRCxFQUFvQyxZQUFNO0FBQ2hELFFBQU1XLE9BQU8sR0FBRyxjQUFHQyw2QkFBZ0JDLEtBQWhCLEVBQUgsQ0FBaEI7QUFFQUMsSUFBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLFlBQU07QUFDMUMsZ0NBQUlILE9BQUosRUFBYVAsTUFBYixFQUFxQkMsWUFBckIsRUFBbUNVLFNBQW5DO0FBRUFDLE1BQUFBLE1BQU0sQ0FBQ1gsWUFBWSxDQUFDRyxPQUFiLENBQXFCQyxlQUF0QixDQUFOLENBQTZDUSxVQUE3QztBQUNELEtBSkMsQ0FBRjtBQU1BakIsSUFBQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QmMsTUFBQUEsRUFBRSxDQUFDLDRDQUFELEVBQStDLFlBQU07QUFDckRULFFBQUFBLFlBQVksQ0FBQ0csT0FBYixDQUFxQkMsZUFBckIsQ0FBcUNDLGVBQXJDLENBQ0UsY0FBR1EsOEJBQUgsQ0FERjtBQUlBLGtDQUFJUCxPQUFKLEVBQWFQLE1BQWIsRUFBcUJDLFlBQXJCLEVBQW1DVSxTQUFuQyxDQUE2Q2QsSUFBN0M7QUFFQWUsUUFBQUEsTUFBTSxDQUFDZixJQUFELENBQU4sQ0FBYWtCLGNBQWIsQ0FBNEI7QUFDMUJDLFVBQUFBLElBQUksRUFBRUMseUJBQVlDLGNBQVosQ0FBMkJDLE9BQTNCLENBQW1DSCxJQURmO0FBRTFCSSxVQUFBQSxPQUFPLEVBQUVOO0FBRmlCLFNBQTVCO0FBSUQsT0FYQyxDQUFGO0FBWUQsS0FiTyxDQUFSO0FBZUFsQixJQUFBQSxRQUFRLENBQUMsY0FBRCxFQUFpQixZQUFNO0FBQzdCYyxNQUFBQSxFQUFFLENBQUMsNENBQUQsRUFBK0MsWUFBTTtBQUNyRFQsUUFBQUEsWUFBWSxDQUFDRyxPQUFiLENBQXFCQyxlQUFyQixDQUFxQ0MsZUFBckMsQ0FDRSxzQkFBVztBQUFBLGlCQUFNLElBQUllLEtBQUosQ0FBVSxXQUFWLENBQU47QUFBQSxTQUFYLENBREY7QUFJQSxrQ0FBSWQsT0FBSixFQUFhUCxNQUFiLEVBQXFCQyxZQUFyQixFQUFtQ1UsU0FBbkMsQ0FBNkNkLElBQTdDO0FBRUFlLFFBQUFBLE1BQU0sQ0FBQ2YsSUFBRCxDQUFOLENBQWFrQixjQUFiLENBQTRCO0FBQzFCQyxVQUFBQSxJQUFJLEVBQUVDLHlCQUFZQyxjQUFaLENBQTJCSSxPQUEzQixDQUFtQ047QUFEZixTQUE1QjtBQUdELE9BVkMsQ0FBRjtBQVdELEtBWk8sQ0FBUjtBQWFELEdBckNPLENBQVI7QUFzQ0QsQ0FqRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhdGVPYnNlcnZhYmxlfSBmcm9tICdyZWR1eC1vYnNlcnZhYmxlJztcbmltcG9ydCB7b2YsIHRocm93RXJyb3J9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjaGFyYWN0ZXJzU3R1Yn0gZnJvbSAnLi4vc3R1YnMvY2hhcmFjdGVyc1N0dWInO1xuaW1wb3J0IHtUZXN0QXNzZW1ibHl9IGZyb20gJy4uL3N0dWJzL1Rlc3RBc3NlbWJseSc7XG5pbXBvcnQge1Jvb3RTdGF0ZX0gZnJvbSAnLi4vLi4vc3JjL3N0b3JlL3Jvb3RTdGF0ZSc7XG5pbXBvcnQge1xuICBIb21lQWN0aW9ucyxcbiAgSG9tZVZpZXdBY3Rpb25zLFxufSBmcm9tICcuLi8uLi9zcmMvc2NyZWVucy9Ib21lU2NyZWVuL0hvbWVBY3Rpb25zJztcbmltcG9ydCB7aG9tZUVwaWNzIGFzIHN1dH0gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvSG9tZVNjcmVlbi9ob21lRXBpY3MnO1xuXG5kZXNjcmliZSgnaG9tZUVwaWNzJywgKCkgPT4ge1xuICBjb25zdCBuZXh0ID0gamVzdC5mbigpO1xuXG4gIGxldCBzdGF0ZSQ6IFN0YXRlT2JzZXJ2YWJsZTxSb290U3RhdGU+O1xuICBsZXQgZGVwZW5kZW5jaWVzOiBUZXN0QXNzZW1ibHk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZGVwZW5kZW5jaWVzID0gbmV3IFRlc3RBc3NlbWJseSgpO1xuICAgIGRlcGVuZGVuY2llcy5nYXRld2F5LmZldGNoQ2hhcmFjdGVycy5tb2NrUmV0dXJuVmFsdWUob2Yodm9pZCAwKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3aGVuIEhPTUUvU1RBUlQgYWN0aW9uIHJlY2VpdmVkJywgKCkgPT4ge1xuICAgIGNvbnN0IGFjdGlvbiQgPSBvZihIb21lVmlld0FjdGlvbnMuc3RhcnQoKSk7XG5cbiAgICBpdCgnZmV0Y2hzIGNoYXJhY3RlcnMgdXNpbmcgZ2F0ZXdheScsICgpID0+IHtcbiAgICAgIHN1dChhY3Rpb24kLCBzdGF0ZSQsIGRlcGVuZGVuY2llcykuc3Vic2NyaWJlKCk7XG5cbiAgICAgIGV4cGVjdChkZXBlbmRlbmNpZXMuZ2F0ZXdheS5mZXRjaENoYXJhY3RlcnMpLnRvQmVDYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIHN1Y2Nlc3MnLCAoKSA9PiB7XG4gICAgICBpdCgnZW1pdHMgSE9NRS9GRVRDSF9DSEFSQUNURVJTX1NVQ0NFU1MgYWN0aW9uJywgKCkgPT4ge1xuICAgICAgICBkZXBlbmRlbmNpZXMuZ2F0ZXdheS5mZXRjaENoYXJhY3RlcnMubW9ja1JldHVyblZhbHVlKFxuICAgICAgICAgIG9mKGNoYXJhY3RlcnNTdHViKVxuICAgICAgICApO1xuXG4gICAgICAgIHN1dChhY3Rpb24kLCBzdGF0ZSQsIGRlcGVuZGVuY2llcykuc3Vic2NyaWJlKG5leHQpO1xuXG4gICAgICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgdHlwZTogSG9tZUFjdGlvbnMuZmV0Y2hDaGFyYWN0ZXIuc3VjY2Vzcy50eXBlLFxuICAgICAgICAgIHBheWxvYWQ6IGNoYXJhY3RlcnNTdHViLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3doZW4gZmFpbHVyZScsICgpID0+IHtcbiAgICAgIGl0KCdlbWl0cyBIT01FL0ZFVENIX0NIQVJBQ1RFUlNfRkFJTFVSRSBhY3Rpb24nLCAoKSA9PiB7XG4gICAgICAgIGRlcGVuZGVuY2llcy5nYXRld2F5LmZldGNoQ2hhcmFjdGVycy5tb2NrUmV0dXJuVmFsdWUoXG4gICAgICAgICAgdGhyb3dFcnJvcigoKSA9PiBuZXcgRXJyb3IoJ2FueSBlcnJvcicpKVxuICAgICAgICApO1xuXG4gICAgICAgIHN1dChhY3Rpb24kLCBzdGF0ZSQsIGRlcGVuZGVuY2llcykuc3Vic2NyaWJlKG5leHQpO1xuXG4gICAgICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgdHlwZTogSG9tZUFjdGlvbnMuZmV0Y2hDaGFyYWN0ZXIuZmFpbHVyZS50eXBlLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
{"version":3,"sources":["ActionCreatorFactory.ts"],"names":["actionCreatorFactory","namespace","type","namespacedType","payload","$"],"mappings":";;;;;;;;;AAAA;;AAsBO,IAAMA,oBAAoB,GAC/B,SADWA,oBACX,CAACC,SAAD;AAAA,SACA,UAAIC,IAAJ,EAAqB;AACnB,QAAMC,cAAc,GAAMF,SAAN,SAAmBC,IAAvC;AACA,WAAO,uBACL,UAACE,OAAD;AAAA,aAAkB;AAChBA,QAAAA,OAAO,EAAPA,OADgB;AAEhBF,QAAAA,IAAI,EAAEC;AAFU,OAAlB;AAAA,KADK,EAKL;AACED,MAAAA,IAAI,EAAEC,cADR;AAEEE,MAAAA,CAAC,EAAE,WAACD,OAAD;AAAA,eACD,cAAG;AACDA,UAAAA,OAAO,EAAPA,OADC;AAEDF,UAAAA,IAAI,EAAEC;AAFL,SAAH,CADC;AAAA;AAFL,KALK,CAAP;AAcD,GAjBD;AAAA,CADK","sourcesContent":["import {Observable, of} from 'rxjs';\nimport {Action, ActionWithPayload} from './Action';\n\nexport interface ActionCreator {\n  readonly type: string;\n  readonly $: () => Observable<Action>;\n\n  (): Action;\n}\n\nexport interface ActionWithPayloadCreator<Payload> {\n  readonly type: string;\n  readonly $: (payload: Payload) => Observable<Payload>;\n\n  (payload: Payload): ActionWithPayload<Payload>;\n}\n\nexport interface ActionCreatorFactory {\n  (type: string): ActionCreator;\n  <Payload = void>(type: string): ActionWithPayloadCreator<Payload>;\n}\n\nexport const actionCreatorFactory =\n  (namespace: string): ActionCreatorFactory =>\n  <T>(type: string) => {\n    const namespacedType = `${namespace}/${type}`;\n    return Object.assign(\n      (payload?: T) => ({\n        payload,\n        type: namespacedType,\n      }),\n      {\n        type: namespacedType,\n        $: (payload?: T) =>\n          of({\n            payload,\n            type: namespacedType,\n          }),\n      }\n    );\n  };\n"]}
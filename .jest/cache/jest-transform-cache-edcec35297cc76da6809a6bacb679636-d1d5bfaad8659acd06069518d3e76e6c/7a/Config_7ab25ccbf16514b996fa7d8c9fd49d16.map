{"version":3,"sources":["../src/Config.ts"],"names":["config","expo","mods","platforms","resolveFrom","options","paths","getConfigFilePaths","rawStaticConfig","rootConfig","staticConfig","reduceExpoObject","getPackageJsonAndPath","configWithDefaultValues","ensureConfigHasDefaultValues","projectRoot","exp","pkg","skipSDKVersionRequirement","packageJsonPath","dynamicConfigObjectType","dynamicConfigPath","staticConfigPath","rawDynamicConfig","getContextConfig","dynamicConfig","fillAndReturnConfig","JsonFile","skipValidation","getConfigName","path","outputRootConfig","ConfigError","customPaths","getCustomConfigFilePaths","getDynamicConfigFilePath","getStaticConfigFilePath","customConfigPaths","isDynamicFilePath","fileName","configPath","fs","configName","configNamespace","findConfigFile","expRcPath","json5","cantReadFileDefault","key","Object","readOptions","writeOptions","getConfig","type","message","outputConfig","modifications","APP_JSON_EXAMPLE","name","slug","sdkVersion","pkgName","pkgVersion","pkgWithDefaults","version","description","expWithDefaults","getSupportedPlatforms","readConfigJson","console","DEFAULT_BUILD_PATH","process","appManifest","web","appName","webName","semver","isBareWorkflowProject","xcodeprojFiles","absolute","cwd","gradleFiles","filePath","getProjectConfigDescriptionWithPaths","projectConfig","relativeDynamicConfigPath"],"mappings":"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","sourcesContent":["import { ModConfig } from '@expo/config-plugins';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\nimport slugify from 'slugify';\n\nimport {\n  AppJSONConfig,\n  ConfigFilePaths,\n  ExpoConfig,\n  ExpRc,\n  GetConfigOptions,\n  PackageJSONConfig,\n  Platform,\n  ProjectConfig,\n  ProjectTarget,\n  WriteConfigOptions,\n} from './Config.types';\nimport { ConfigError } from './Errors';\nimport { getExpoSDKVersion } from './Project';\nimport { getDynamicConfig, getStaticConfig } from './getConfig';\nimport { getFullName } from './getFullName';\nimport { withConfigPlugins } from './plugins/withConfigPlugins';\nimport { withInternal } from './plugins/withInternal';\nimport { getRootPackageJsonPath } from './resolvePackageJson';\n\ntype SplitConfigs = { expo: ExpoConfig; mods: ModConfig };\n\n/**\n * If a config has an `expo` object then that will be used as the config.\n * This method reduces out other top level values if an `expo` object exists.\n *\n * @param config Input config object to reduce\n */\nfunction reduceExpoObject(config?: any): SplitConfigs {\n  if (!config) return config === undefined ? null : config;\n\n  const { mods, ...expo } = config.expo ?? config;\n\n  return {\n    expo,\n    mods,\n  };\n}\n\n/**\n * Get all platforms that a project is currently capable of running.\n *\n * @param projectRoot\n * @param exp\n */\nfunction getSupportedPlatforms(projectRoot: string): Platform[] {\n  const platforms: Platform[] = [];\n  if (resolveFrom.silent(projectRoot, 'react-native')) {\n    platforms.push('ios', 'android');\n  }\n  if (resolveFrom.silent(projectRoot, 'react-native-web')) {\n    platforms.push('web');\n  }\n  return platforms;\n}\n\n/**\n * Evaluate the config for an Expo project.\n * If a function is exported from the `app.config.js` then a partial config will be passed as an argument.\n * The partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.\n *\n * If options.isPublicConfig is true, the Expo config will include only public-facing options (omitting private keys).\n * The resulting config should be suitable for hosting or embedding in a publicly readable location.\n *\n * **Example**\n * ```js\n * module.exports = function({ config }) {\n *   // mutate the config before returning it.\n *   config.slug = 'new slug'\n *   return { expo: config };\n * }\n * ```\n *\n * **Supports**\n * - `app.config.ts`\n * - `app.config.js`\n * - `app.config.json`\n * - `app.json`\n *\n * @param projectRoot the root folder containing all of your application code\n * @param options enforce criteria for a project config\n */\nexport function getConfig(projectRoot: string, options: GetConfigOptions = {}): ProjectConfig {\n  const paths = getConfigFilePaths(projectRoot);\n\n  const rawStaticConfig = paths.staticConfigPath ? getStaticConfig(paths.staticConfigPath) : null;\n  // For legacy reasons, always return an object.\n  const rootConfig = (rawStaticConfig || {}) as AppJSONConfig;\n  const staticConfig = reduceExpoObject(rawStaticConfig) || {};\n\n  // Can only change the package.json location if an app.json or app.config.json exists\n  const [packageJson, packageJsonPath] = getPackageJsonAndPath(projectRoot);\n\n  function fillAndReturnConfig(config: SplitConfigs, dynamicConfigObjectType: string | null) {\n    const configWithDefaultValues = {\n      ...ensureConfigHasDefaultValues({\n        projectRoot,\n        exp: config.expo,\n        pkg: packageJson,\n        skipSDKVersionRequirement: options.skipSDKVersionRequirement,\n        paths,\n        packageJsonPath,\n      }),\n      mods: config.mods,\n      dynamicConfigObjectType,\n      rootConfig,\n      dynamicConfigPath: paths.dynamicConfigPath,\n      staticConfigPath: paths.staticConfigPath,\n    };\n\n    if (options.isModdedConfig) {\n      // @ts-ignore: Add the mods back to the object.\n      configWithDefaultValues.exp.mods = config.mods ?? null;\n    }\n\n    // Apply static json plugins, should be done after _internal\n    configWithDefaultValues.exp = withConfigPlugins(\n      configWithDefaultValues.exp,\n      !!options.skipPlugins\n    );\n\n    if (!options.isModdedConfig) {\n      // @ts-ignore: Delete mods added by static plugins when they won't have a chance to be evaluated\n      delete configWithDefaultValues.exp.mods;\n    }\n\n    if (options.isPublicConfig) {\n      // Remove internal values with references to user's file paths from the public config.\n      delete configWithDefaultValues.exp._internal;\n\n      if (configWithDefaultValues.exp.hooks) {\n        delete configWithDefaultValues.exp.hooks;\n      }\n      if (configWithDefaultValues.exp.ios?.config) {\n        delete configWithDefaultValues.exp.ios.config;\n      }\n      if (configWithDefaultValues.exp.android?.config) {\n        delete configWithDefaultValues.exp.android.config;\n      }\n\n      // These value will be overwritten when the manifest is being served from the host (i.e. not completely accurate).\n      // @ts-ignore: currentFullName not on type yet.\n      configWithDefaultValues.exp.currentFullName = getFullName(configWithDefaultValues.exp);\n      // @ts-ignore: originalFullName not on type yet.\n      configWithDefaultValues.exp.originalFullName = getFullName(configWithDefaultValues.exp);\n    }\n\n    return configWithDefaultValues;\n  }\n\n  // Fill in the static config\n  function getContextConfig(config: SplitConfigs) {\n    return ensureConfigHasDefaultValues({\n      projectRoot,\n      exp: config.expo,\n      pkg: packageJson,\n      skipSDKVersionRequirement: true,\n      paths,\n      packageJsonPath,\n    }).exp;\n  }\n\n  if (paths.dynamicConfigPath) {\n    // No app.config.json or app.json but app.config.js\n    const { exportedObjectType, config: rawDynamicConfig } = getDynamicConfig(\n      paths.dynamicConfigPath,\n      {\n        projectRoot,\n        staticConfigPath: paths.staticConfigPath,\n        packageJsonPath,\n        config: getContextConfig(staticConfig),\n      }\n    );\n    // Allow for the app.config.js to `export default null;`\n    // Use `dynamicConfigPath` to detect if a dynamic config exists.\n    const dynamicConfig = reduceExpoObject(rawDynamicConfig) || {};\n    return fillAndReturnConfig(dynamicConfig, exportedObjectType);\n  }\n\n  // No app.config.js but json or no config\n  return fillAndReturnConfig(staticConfig || {}, null);\n}\n\nexport function getPackageJson(projectRoot: string): PackageJSONConfig {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n  return pkg;\n}\n\nfunction getPackageJsonAndPath(projectRoot: string): [PackageJSONConfig, string] {\n  const packageJsonPath = getRootPackageJsonPath(projectRoot);\n  return [JsonFile.read(packageJsonPath), packageJsonPath];\n}\n\nexport function readConfigJson(\n  projectRoot: string,\n  skipValidation: boolean = false,\n  skipSDKVersionRequirement: boolean = false\n): ProjectConfig {\n  const paths = getConfigFilePaths(projectRoot);\n\n  const rawStaticConfig = paths.staticConfigPath ? getStaticConfig(paths.staticConfigPath) : null;\n\n  const getConfigName = (): string => {\n    if (paths.staticConfigPath) return ` \\`${path.basename(paths.staticConfigPath)}\\``;\n    return '';\n  };\n\n  let outputRootConfig = rawStaticConfig as JSONObject | null;\n  if (outputRootConfig === null || typeof outputRootConfig !== 'object') {\n    if (skipValidation) {\n      outputRootConfig = { expo: {} };\n    } else {\n      throw new ConfigError(\n        `Project at path ${path.resolve(\n          projectRoot\n        )} does not contain a valid Expo config${getConfigName()}`,\n        'NOT_OBJECT'\n      );\n    }\n  }\n  let exp = outputRootConfig.expo as Partial<ExpoConfig>;\n  if (exp === null || typeof exp !== 'object') {\n    throw new ConfigError(\n      `Property 'expo' in${getConfigName()} for project at path ${path.resolve(\n        projectRoot\n      )} is not an object. Please make sure${getConfigName()} includes a managed Expo app config like this: ${APP_JSON_EXAMPLE}`,\n      'NO_EXPO'\n    );\n  }\n\n  exp = { ...exp };\n\n  const [pkg, packageJsonPath] = getPackageJsonAndPath(projectRoot);\n\n  return {\n    ...ensureConfigHasDefaultValues({\n      projectRoot,\n      exp,\n      pkg,\n      skipSDKVersionRequirement,\n      paths,\n      packageJsonPath,\n    }),\n    mods: null,\n    dynamicConfigPath: null,\n    dynamicConfigObjectType: null,\n    rootConfig: { ...outputRootConfig } as AppJSONConfig,\n    ...paths,\n  };\n}\n\n/**\n * Get the static and dynamic config paths for a project. Also accounts for custom paths.\n *\n * @param projectRoot\n */\nexport function getConfigFilePaths(projectRoot: string): ConfigFilePaths {\n  const customPaths = getCustomConfigFilePaths(projectRoot);\n  if (customPaths) {\n    return customPaths;\n  }\n\n  return {\n    dynamicConfigPath: getDynamicConfigFilePath(projectRoot),\n    staticConfigPath: getStaticConfigFilePath(projectRoot),\n  };\n}\n\nfunction getCustomConfigFilePaths(projectRoot: string): ConfigFilePaths | null {\n  if (!customConfigPaths[projectRoot]) {\n    return null;\n  }\n  // If the user picks a custom config path, we will only use that and skip searching for a secondary config.\n  if (isDynamicFilePath(customConfigPaths[projectRoot])) {\n    return {\n      dynamicConfigPath: customConfigPaths[projectRoot],\n      staticConfigPath: null,\n    };\n  }\n  // Anything that's not js or ts will be treated as json.\n  return { staticConfigPath: customConfigPaths[projectRoot], dynamicConfigPath: null };\n}\n\nfunction getDynamicConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.ts', 'app.config.js']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\nfunction getStaticConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.json', 'app.json']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\n// TODO: This should account for dynamic configs\nexport function findConfigFile(\n  projectRoot: string\n): { configPath: string; configName: string; configNamespace: 'expo' } {\n  let configPath: string;\n  // Check for a custom config path first.\n  if (customConfigPaths[projectRoot]) {\n    configPath = customConfigPaths[projectRoot];\n    // We shouldn't verify if the file exists because\n    // the user manually specified that this path should be used.\n    return {\n      configPath,\n      configName: path.basename(configPath),\n      configNamespace: 'expo',\n    };\n  } else {\n    // app.config.json takes higher priority over app.json\n    configPath = path.join(projectRoot, 'app.config.json');\n    if (!fs.existsSync(configPath)) {\n      configPath = path.join(projectRoot, 'app.json');\n    }\n  }\n\n  return {\n    configPath,\n    configName: path.basename(configPath),\n    configNamespace: 'expo',\n  };\n}\n\n// TODO: deprecate\nexport function configFilename(projectRoot: string): string {\n  return findConfigFile(projectRoot).configName;\n}\n\nexport async function readExpRcAsync(projectRoot: string): Promise<ExpRc> {\n  const expRcPath = path.join(projectRoot, '.exprc');\n  return await JsonFile.readAsync(expRcPath, { json5: true, cantReadFileDefault: {} });\n}\n\nconst customConfigPaths: { [projectRoot: string]: string } = {};\n\nexport function resetCustomConfigPaths(): void {\n  for (const key of Object.keys(customConfigPaths)) {\n    delete customConfigPaths[key];\n  }\n}\n\nexport function setCustomConfigPath(projectRoot: string, configPath: string): void {\n  customConfigPaths[projectRoot] = configPath;\n}\n\n/**\n * Attempt to modify an Expo project config.\n * This will only fully work if the project is using static configs only.\n * Otherwise 'warn' | 'fail' will return with a message about why the config couldn't be updated.\n * The potentially modified config object will be returned for testing purposes.\n *\n * @param projectRoot\n * @param modifications modifications to make to an existing config\n * @param readOptions options for reading the current config file\n * @param writeOptions If true, the static config file will not be rewritten\n */\nexport async function modifyConfigAsync(\n  projectRoot: string,\n  modifications: Partial<ExpoConfig>,\n  readOptions: GetConfigOptions = {},\n  writeOptions: WriteConfigOptions = {}\n): Promise<{\n  type: 'success' | 'warn' | 'fail';\n  message?: string;\n  config: AppJSONConfig | null;\n}> {\n  const config = getConfig(projectRoot, readOptions);\n  if (config.dynamicConfigPath) {\n    // We cannot automatically write to a dynamic config.\n    /* Currently we should just use the safest approach possible, informing the user that they'll need to manually modify their dynamic config.\n\n    if (config.staticConfigPath) {\n      // Both a dynamic and a static config exist.\n      if (config.dynamicConfigObjectType === 'function') {\n        // The dynamic config exports a function, this means it possibly extends the static config.\n      } else {\n        // Dynamic config ignores the static config, there isn't a reason to automatically write to it.\n        // Instead we should warn the user to add values to their dynamic config.\n      }\n    }\n    */\n    return {\n      type: 'warn',\n      message: `Cannot automatically write to dynamic config at: ${path.relative(\n        projectRoot,\n        config.dynamicConfigPath\n      )}`,\n      config: null,\n    };\n  } else if (config.staticConfigPath) {\n    // Static with no dynamic config, this means we can append to the config automatically.\n    let outputConfig: AppJSONConfig;\n    // If the config has an expo object (app.json) then append the options to that object.\n    if (config.rootConfig.expo) {\n      outputConfig = {\n        ...config.rootConfig,\n        expo: { ...config.rootConfig.expo, ...modifications },\n      };\n    } else {\n      // Otherwise (app.config.json) just add the config modification to the top most level.\n      outputConfig = { ...config.rootConfig, ...modifications };\n    }\n    if (!writeOptions.dryRun) {\n      await JsonFile.writeAsync(config.staticConfigPath, outputConfig, { json5: false });\n    }\n    return { type: 'success', config: outputConfig };\n  }\n\n  return { type: 'fail', message: 'No config exists', config: null };\n}\n\nconst APP_JSON_EXAMPLE = JSON.stringify({\n  expo: {\n    name: 'My app',\n    slug: 'my-app',\n    sdkVersion: '...',\n  },\n});\n\nfunction ensureConfigHasDefaultValues({\n  projectRoot,\n  exp,\n  pkg,\n  paths,\n  packageJsonPath,\n  skipSDKVersionRequirement = false,\n}: {\n  projectRoot: string;\n  exp: Partial<ExpoConfig> | null;\n  pkg: JSONObject;\n  skipSDKVersionRequirement?: boolean;\n  paths?: ConfigFilePaths;\n  packageJsonPath?: string;\n}): { exp: ExpoConfig; pkg: PackageJSONConfig } {\n  if (!exp) {\n    exp = {};\n  }\n  exp = withInternal(exp as any, {\n    projectRoot,\n    ...(paths ?? {}),\n    packageJsonPath,\n  });\n  // Defaults for package.json fields\n  const pkgName = typeof pkg.name === 'string' ? pkg.name : path.basename(projectRoot);\n  const pkgVersion = typeof pkg.version === 'string' ? pkg.version : '1.0.0';\n\n  const pkgWithDefaults = { ...pkg, name: pkgName, version: pkgVersion };\n\n  // Defaults for app.json/app.config.js fields\n  const name = exp.name ?? pkgName;\n  const slug = exp.slug ?? slugify(name.toLowerCase());\n  const version = exp.version ?? pkgVersion;\n  let description = exp.description;\n  if (!description && typeof pkg.description === 'string') {\n    description = pkg.description;\n  }\n\n  const expWithDefaults = { ...exp, name, slug, version, description };\n\n  let sdkVersion;\n  try {\n    sdkVersion = getExpoSDKVersion(projectRoot, expWithDefaults);\n  } catch (error) {\n    if (!skipSDKVersionRequirement) throw error;\n  }\n\n  let platforms = exp.platforms;\n  if (!platforms) {\n    platforms = getSupportedPlatforms(projectRoot);\n  }\n\n  return {\n    exp: { ...expWithDefaults, sdkVersion, platforms },\n    pkg: pkgWithDefaults,\n  };\n}\n\nexport async function writeConfigJsonAsync(\n  projectRoot: string,\n  options: object\n): Promise<ProjectConfig> {\n  const paths = getConfigFilePaths(projectRoot);\n  let { exp, pkg, rootConfig, dynamicConfigObjectType, staticConfigPath } = readConfigJson(\n    projectRoot\n  );\n  exp = { ...rootConfig.expo, ...options };\n  rootConfig = { ...rootConfig, expo: exp };\n\n  if (paths.staticConfigPath) {\n    await JsonFile.writeAsync(paths.staticConfigPath, rootConfig, { json5: false });\n  } else {\n    console.log('Failed to write to config: ', options);\n  }\n\n  return {\n    exp,\n    pkg,\n    rootConfig,\n    staticConfigPath,\n    dynamicConfigObjectType,\n    ...paths,\n  };\n}\nconst DEFAULT_BUILD_PATH = `web-build`;\n\nexport function getWebOutputPath(config: { [key: string]: any } = {}): string {\n  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {\n    return process.env.WEBPACK_BUILD_OUTPUT_PATH;\n  }\n  const expo = config.expo || config || {};\n  return expo?.web?.build?.output || DEFAULT_BUILD_PATH;\n}\n\nexport function getNameFromConfig(\n  exp: Record<string, any> = {}\n): { appName?: string; webName?: string } {\n  // For RN CLI support\n  const appManifest = exp.expo || exp;\n  const { web = {} } = appManifest;\n\n  // rn-cli apps use a displayName value as well.\n  const appName = exp.displayName || appManifest.displayName || appManifest.name;\n  const webName = web.name || appName;\n\n  return {\n    appName,\n    webName,\n  };\n}\n\nexport function getDefaultTarget(projectRoot: string): ProjectTarget {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  // before SDK 37, always default to managed to preserve previous behavior\n  if (exp.sdkVersion && exp.sdkVersion !== 'UNVERSIONED' && semver.lt(exp.sdkVersion, '37.0.0')) {\n    return 'managed';\n  }\n  return isBareWorkflowProject(projectRoot) ? 'bare' : 'managed';\n}\n\nfunction isBareWorkflowProject(projectRoot: string): boolean {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n\n  if (pkg.dependencies && pkg.dependencies.expokit) {\n    return false;\n  }\n\n  const xcodeprojFiles = globSync('ios/**/*.xcodeproj', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (xcodeprojFiles.length) {\n    return true;\n  }\n  const gradleFiles = globSync('android/**/*.gradle', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (gradleFiles.length) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * true if the file is .js or .ts\n *\n * @param filePath\n */\nfunction isDynamicFilePath(filePath: string): boolean {\n  return !!filePath.match(/\\.[j|t]s$/);\n}\n\n/**\n * Return a useful name describing the project config.\n * - dynamic: app.config.js\n * - static: app.json\n * - custom path app config relative to root folder\n * - both: app.config.js or app.json\n */\nexport function getProjectConfigDescription(projectRoot: string): string {\n  const paths = getConfigFilePaths(projectRoot);\n  return getProjectConfigDescriptionWithPaths(projectRoot, paths);\n}\n\n/**\n * Returns a string describing the configurations used for the given project root.\n * Will return null if no config is found.\n *\n * @param projectRoot\n * @param projectConfig\n */\nexport function getProjectConfigDescriptionWithPaths(\n  projectRoot: string,\n  projectConfig: ConfigFilePaths\n): string {\n  if (projectConfig.dynamicConfigPath) {\n    const relativeDynamicConfigPath = path.relative(projectRoot, projectConfig.dynamicConfigPath);\n    if (projectConfig.staticConfigPath) {\n      return `${relativeDynamicConfigPath} or ${path.relative(\n        projectRoot,\n        projectConfig.staticConfigPath\n      )}`;\n    }\n    return relativeDynamicConfigPath;\n  } else if (projectConfig.staticConfigPath) {\n    return path.relative(projectRoot, projectConfig.staticConfigPath);\n  }\n  // If a config doesn't exist, our tooling will generate a static app.json\n  return 'app.json';\n}\n\nexport * from './Config.types';\n\nexport { isLegacyImportsEnabled } from './isLegacyImportsEnabled';\n"]}
3ff3212417b03bcdde78f021bab659f0
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["mods"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getConfig: true,
  getPackageJson: true,
  readConfigJson: true,
  getConfigFilePaths: true,
  findConfigFile: true,
  configFilename: true,
  readExpRcAsync: true,
  resetCustomConfigPaths: true,
  setCustomConfigPath: true,
  modifyConfigAsync: true,
  writeConfigJsonAsync: true,
  getWebOutputPath: true,
  getNameFromConfig: true,
  getDefaultTarget: true,
  getProjectConfigDescription: true,
  getProjectConfigDescriptionWithPaths: true,
  isLegacyImportsEnabled: true
};
exports.getConfig = getConfig;
exports.getPackageJson = getPackageJson;
exports.readConfigJson = readConfigJson;
exports.getConfigFilePaths = getConfigFilePaths;
exports.findConfigFile = findConfigFile;
exports.configFilename = configFilename;
exports.readExpRcAsync = readExpRcAsync;
exports.resetCustomConfigPaths = resetCustomConfigPaths;
exports.setCustomConfigPath = setCustomConfigPath;
exports.modifyConfigAsync = modifyConfigAsync;
exports.writeConfigJsonAsync = writeConfigJsonAsync;
exports.getWebOutputPath = getWebOutputPath;
exports.getNameFromConfig = getNameFromConfig;
exports.getDefaultTarget = getDefaultTarget;
exports.getProjectConfigDescription = getProjectConfigDescription;
exports.getProjectConfigDescriptionWithPaths = getProjectConfigDescriptionWithPaths;
Object.defineProperty(exports, "isLegacyImportsEnabled", {
  enumerable: true,
  get: function get() {
    return _isLegacyImportsEnabled().isLegacyImportsEnabled;
  }
});

function _jsonFile() {
  var data = _interopRequireDefault(require("@expo/json-file"));

  _jsonFile = function _jsonFile() {
    return data;
  };

  return data;
}

function _fs() {
  var data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _glob() {
  var data = require("glob");

  _glob = function _glob() {
    return data;
  };

  return data;
}

function _path() {
  var data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

function _resolveFrom() {
  var data = _interopRequireDefault(require("resolve-from"));

  _resolveFrom = function _resolveFrom() {
    return data;
  };

  return data;
}

function _semver() {
  var data = _interopRequireDefault(require("semver"));

  _semver = function _semver() {
    return data;
  };

  return data;
}

function _slugify() {
  var data = _interopRequireDefault(require("slugify"));

  _slugify = function _slugify() {
    return data;
  };

  return data;
}

function _Errors() {
  var data = require("./Errors");

  _Errors = function _Errors() {
    return data;
  };

  return data;
}

function _Project() {
  var data = require("./Project");

  _Project = function _Project() {
    return data;
  };

  return data;
}

function _getConfig() {
  var data = require("./getConfig");

  _getConfig = function _getConfig() {
    return data;
  };

  return data;
}

function _getFullName() {
  var data = require("./getFullName");

  _getFullName = function _getFullName() {
    return data;
  };

  return data;
}

function _withConfigPlugins() {
  var data = require("./plugins/withConfigPlugins");

  _withConfigPlugins = function _withConfigPlugins() {
    return data;
  };

  return data;
}

function _withInternal() {
  var data = require("./plugins/withInternal");

  _withInternal = function _withInternal() {
    return data;
  };

  return data;
}

function _resolvePackageJson() {
  var data = require("./resolvePackageJson");

  _resolvePackageJson = function _resolvePackageJson() {
    return data;
  };

  return data;
}

var _Config = require("./Config.types");

Object.keys(_Config).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Config[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Config[key];
    }
  });
});

function _isLegacyImportsEnabled() {
  var data = require("./isLegacyImportsEnabled");

  _isLegacyImportsEnabled = function _isLegacyImportsEnabled() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function reduceExpoObject(config) {
  var _config$expo;

  if (!config) return config === undefined ? null : config;

  var _ref = (_config$expo = config.expo) !== null && _config$expo !== void 0 ? _config$expo : config,
      mods = _ref.mods,
      expo = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  return {
    expo: expo,
    mods: mods
  };
}

function getSupportedPlatforms(projectRoot) {
  var platforms = [];

  if (_resolveFrom().default.silent(projectRoot, 'react-native')) {
    platforms.push('ios', 'android');
  }

  if (_resolveFrom().default.silent(projectRoot, 'react-native-web')) {
    platforms.push('web');
  }

  return platforms;
}

function getConfig(projectRoot) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var paths = getConfigFilePaths(projectRoot);
  var rawStaticConfig = paths.staticConfigPath ? (0, _getConfig().getStaticConfig)(paths.staticConfigPath) : null;
  var rootConfig = rawStaticConfig || {};
  var staticConfig = reduceExpoObject(rawStaticConfig) || {};

  var _getPackageJsonAndPat = getPackageJsonAndPath(projectRoot),
      _getPackageJsonAndPat2 = (0, _slicedToArray2.default)(_getPackageJsonAndPat, 2),
      packageJson = _getPackageJsonAndPat2[0],
      packageJsonPath = _getPackageJsonAndPat2[1];

  function fillAndReturnConfig(config, dynamicConfigObjectType) {
    var configWithDefaultValues = _objectSpread(_objectSpread({}, ensureConfigHasDefaultValues({
      projectRoot: projectRoot,
      exp: config.expo,
      pkg: packageJson,
      skipSDKVersionRequirement: options.skipSDKVersionRequirement,
      paths: paths,
      packageJsonPath: packageJsonPath
    })), {}, {
      mods: config.mods,
      dynamicConfigObjectType: dynamicConfigObjectType,
      rootConfig: rootConfig,
      dynamicConfigPath: paths.dynamicConfigPath,
      staticConfigPath: paths.staticConfigPath
    });

    if (options.isModdedConfig) {
      var _config$mods;

      configWithDefaultValues.exp.mods = (_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : null;
    }

    configWithDefaultValues.exp = (0, _withConfigPlugins().withConfigPlugins)(configWithDefaultValues.exp, !!options.skipPlugins);

    if (!options.isModdedConfig) {
      delete configWithDefaultValues.exp.mods;
    }

    if (options.isPublicConfig) {
      var _configWithDefaultVal, _configWithDefaultVal2;

      delete configWithDefaultValues.exp._internal;

      if (configWithDefaultValues.exp.hooks) {
        delete configWithDefaultValues.exp.hooks;
      }

      if ((_configWithDefaultVal = configWithDefaultValues.exp.ios) !== null && _configWithDefaultVal !== void 0 && _configWithDefaultVal.config) {
        delete configWithDefaultValues.exp.ios.config;
      }

      if ((_configWithDefaultVal2 = configWithDefaultValues.exp.android) !== null && _configWithDefaultVal2 !== void 0 && _configWithDefaultVal2.config) {
        delete configWithDefaultValues.exp.android.config;
      }

      configWithDefaultValues.exp.currentFullName = (0, _getFullName().getFullName)(configWithDefaultValues.exp);
      configWithDefaultValues.exp.originalFullName = (0, _getFullName().getFullName)(configWithDefaultValues.exp);
    }

    return configWithDefaultValues;
  }

  function getContextConfig(config) {
    return ensureConfigHasDefaultValues({
      projectRoot: projectRoot,
      exp: config.expo,
      pkg: packageJson,
      skipSDKVersionRequirement: true,
      paths: paths,
      packageJsonPath: packageJsonPath
    }).exp;
  }

  if (paths.dynamicConfigPath) {
    var _ref2 = (0, _getConfig().getDynamicConfig)(paths.dynamicConfigPath, {
      projectRoot: projectRoot,
      staticConfigPath: paths.staticConfigPath,
      packageJsonPath: packageJsonPath,
      config: getContextConfig(staticConfig)
    }),
        exportedObjectType = _ref2.exportedObjectType,
        rawDynamicConfig = _ref2.config;

    var dynamicConfig = reduceExpoObject(rawDynamicConfig) || {};
    return fillAndReturnConfig(dynamicConfig, exportedObjectType);
  }

  return fillAndReturnConfig(staticConfig || {}, null);
}

function getPackageJson(projectRoot) {
  var _getPackageJsonAndPat3 = getPackageJsonAndPath(projectRoot),
      _getPackageJsonAndPat4 = (0, _slicedToArray2.default)(_getPackageJsonAndPat3, 1),
      pkg = _getPackageJsonAndPat4[0];

  return pkg;
}

function getPackageJsonAndPath(projectRoot) {
  var packageJsonPath = (0, _resolvePackageJson().getRootPackageJsonPath)(projectRoot);
  return [_jsonFile().default.read(packageJsonPath), packageJsonPath];
}

function readConfigJson(projectRoot) {
  var skipValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var skipSDKVersionRequirement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var paths = getConfigFilePaths(projectRoot);
  var rawStaticConfig = paths.staticConfigPath ? (0, _getConfig().getStaticConfig)(paths.staticConfigPath) : null;

  var getConfigName = function getConfigName() {
    if (paths.staticConfigPath) return " `" + _path().default.basename(paths.staticConfigPath) + "`";
    return '';
  };

  var outputRootConfig = rawStaticConfig;

  if (outputRootConfig === null || typeof outputRootConfig !== 'object') {
    if (skipValidation) {
      outputRootConfig = {
        expo: {}
      };
    } else {
      throw new (_Errors().ConfigError)("Project at path " + _path().default.resolve(projectRoot) + " does not contain a valid Expo config" + getConfigName(), 'NOT_OBJECT');
    }
  }

  var exp = outputRootConfig.expo;

  if (exp === null || typeof exp !== 'object') {
    throw new (_Errors().ConfigError)("Property 'expo' in" + getConfigName() + " for project at path " + _path().default.resolve(projectRoot) + " is not an object. Please make sure" + getConfigName() + " includes a managed Expo app config like this: " + APP_JSON_EXAMPLE, 'NO_EXPO');
  }

  exp = _objectSpread({}, exp);

  var _getPackageJsonAndPat5 = getPackageJsonAndPath(projectRoot),
      _getPackageJsonAndPat6 = (0, _slicedToArray2.default)(_getPackageJsonAndPat5, 2),
      pkg = _getPackageJsonAndPat6[0],
      packageJsonPath = _getPackageJsonAndPat6[1];

  return _objectSpread(_objectSpread({}, ensureConfigHasDefaultValues({
    projectRoot: projectRoot,
    exp: exp,
    pkg: pkg,
    skipSDKVersionRequirement: skipSDKVersionRequirement,
    paths: paths,
    packageJsonPath: packageJsonPath
  })), {}, {
    mods: null,
    dynamicConfigPath: null,
    dynamicConfigObjectType: null,
    rootConfig: _objectSpread({}, outputRootConfig)
  }, paths);
}

function getConfigFilePaths(projectRoot) {
  var customPaths = getCustomConfigFilePaths(projectRoot);

  if (customPaths) {
    return customPaths;
  }

  return {
    dynamicConfigPath: getDynamicConfigFilePath(projectRoot),
    staticConfigPath: getStaticConfigFilePath(projectRoot)
  };
}

function getCustomConfigFilePaths(projectRoot) {
  if (!customConfigPaths[projectRoot]) {
    return null;
  }

  if (isDynamicFilePath(customConfigPaths[projectRoot])) {
    return {
      dynamicConfigPath: customConfigPaths[projectRoot],
      staticConfigPath: null
    };
  }

  return {
    staticConfigPath: customConfigPaths[projectRoot],
    dynamicConfigPath: null
  };
}

function getDynamicConfigFilePath(projectRoot) {
  for (var _i = 0, _arr = ['app.config.ts', 'app.config.js']; _i < _arr.length; _i++) {
    var fileName = _arr[_i];

    var configPath = _path().default.join(projectRoot, fileName);

    if (_fs().default.existsSync(configPath)) {
      return configPath;
    }
  }

  return null;
}

function getStaticConfigFilePath(projectRoot) {
  for (var _i2 = 0, _arr2 = ['app.config.json', 'app.json']; _i2 < _arr2.length; _i2++) {
    var fileName = _arr2[_i2];

    var configPath = _path().default.join(projectRoot, fileName);

    if (_fs().default.existsSync(configPath)) {
      return configPath;
    }
  }

  return null;
}

function findConfigFile(projectRoot) {
  var configPath;

  if (customConfigPaths[projectRoot]) {
    configPath = customConfigPaths[projectRoot];
    return {
      configPath: configPath,
      configName: _path().default.basename(configPath),
      configNamespace: 'expo'
    };
  } else {
    configPath = _path().default.join(projectRoot, 'app.config.json');

    if (!_fs().default.existsSync(configPath)) {
      configPath = _path().default.join(projectRoot, 'app.json');
    }
  }

  return {
    configPath: configPath,
    configName: _path().default.basename(configPath),
    configNamespace: 'expo'
  };
}

function configFilename(projectRoot) {
  return findConfigFile(projectRoot).configName;
}

function readExpRcAsync(projectRoot) {
  var expRcPath;
  return _regenerator.default.async(function readExpRcAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          expRcPath = _path().default.join(projectRoot, '.exprc');
          _context.next = 3;
          return _regenerator.default.awrap(_jsonFile().default.readAsync(expRcPath, {
            json5: true,
            cantReadFileDefault: {}
          }));

        case 3:
          return _context.abrupt("return", _context.sent);

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

var customConfigPaths = {};

function resetCustomConfigPaths() {
  for (var _i3 = 0, _Object$keys = Object.keys(customConfigPaths); _i3 < _Object$keys.length; _i3++) {
    var key = _Object$keys[_i3];
    delete customConfigPaths[key];
  }
}

function setCustomConfigPath(projectRoot, configPath) {
  customConfigPaths[projectRoot] = configPath;
}

function modifyConfigAsync(projectRoot, modifications) {
  var readOptions,
      writeOptions,
      config,
      outputConfig,
      _args2 = arguments;
  return _regenerator.default.async(function modifyConfigAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          readOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
          writeOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
          config = getConfig(projectRoot, readOptions);

          if (!config.dynamicConfigPath) {
            _context2.next = 7;
            break;
          }

          return _context2.abrupt("return", {
            type: 'warn',
            message: "Cannot automatically write to dynamic config at: " + _path().default.relative(projectRoot, config.dynamicConfigPath),
            config: null
          });

        case 7:
          if (!config.staticConfigPath) {
            _context2.next = 13;
            break;
          }

          if (config.rootConfig.expo) {
            outputConfig = _objectSpread(_objectSpread({}, config.rootConfig), {}, {
              expo: _objectSpread(_objectSpread({}, config.rootConfig.expo), modifications)
            });
          } else {
            outputConfig = _objectSpread(_objectSpread({}, config.rootConfig), modifications);
          }

          if (writeOptions.dryRun) {
            _context2.next = 12;
            break;
          }

          _context2.next = 12;
          return _regenerator.default.awrap(_jsonFile().default.writeAsync(config.staticConfigPath, outputConfig, {
            json5: false
          }));

        case 12:
          return _context2.abrupt("return", {
            type: 'success',
            config: outputConfig
          });

        case 13:
          return _context2.abrupt("return", {
            type: 'fail',
            message: 'No config exists',
            config: null
          });

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}

var APP_JSON_EXAMPLE = JSON.stringify({
  expo: {
    name: 'My app',
    slug: 'my-app',
    sdkVersion: '...'
  }
});

function ensureConfigHasDefaultValues(_ref3) {
  var projectRoot = _ref3.projectRoot,
      exp = _ref3.exp,
      pkg = _ref3.pkg,
      paths = _ref3.paths,
      packageJsonPath = _ref3.packageJsonPath,
      _ref3$skipSDKVersionR = _ref3.skipSDKVersionRequirement,
      skipSDKVersionRequirement = _ref3$skipSDKVersionR === void 0 ? false : _ref3$skipSDKVersionR;

  var _exp$name, _exp$slug, _exp$version;

  if (!exp) {
    exp = {};
  }

  exp = (0, _withInternal().withInternal)(exp, _objectSpread(_objectSpread({
    projectRoot: projectRoot
  }, paths !== null && paths !== void 0 ? paths : {}), {}, {
    packageJsonPath: packageJsonPath
  }));
  var pkgName = typeof pkg.name === 'string' ? pkg.name : _path().default.basename(projectRoot);
  var pkgVersion = typeof pkg.version === 'string' ? pkg.version : '1.0.0';

  var pkgWithDefaults = _objectSpread(_objectSpread({}, pkg), {}, {
    name: pkgName,
    version: pkgVersion
  });

  var name = (_exp$name = exp.name) !== null && _exp$name !== void 0 ? _exp$name : pkgName;
  var slug = (_exp$slug = exp.slug) !== null && _exp$slug !== void 0 ? _exp$slug : (0, _slugify().default)(name.toLowerCase());
  var version = (_exp$version = exp.version) !== null && _exp$version !== void 0 ? _exp$version : pkgVersion;
  var description = exp.description;

  if (!description && typeof pkg.description === 'string') {
    description = pkg.description;
  }

  var expWithDefaults = _objectSpread(_objectSpread({}, exp), {}, {
    name: name,
    slug: slug,
    version: version,
    description: description
  });

  var sdkVersion;

  try {
    sdkVersion = (0, _Project().getExpoSDKVersion)(projectRoot, expWithDefaults);
  } catch (error) {
    if (!skipSDKVersionRequirement) throw error;
  }

  var platforms = exp.platforms;

  if (!platforms) {
    platforms = getSupportedPlatforms(projectRoot);
  }

  return {
    exp: _objectSpread(_objectSpread({}, expWithDefaults), {}, {
      sdkVersion: sdkVersion,
      platforms: platforms
    }),
    pkg: pkgWithDefaults
  };
}

function writeConfigJsonAsync(projectRoot, options) {
  var paths, _readConfigJson, exp, pkg, rootConfig, dynamicConfigObjectType, staticConfigPath;

  return _regenerator.default.async(function writeConfigJsonAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          paths = getConfigFilePaths(projectRoot);
          _readConfigJson = readConfigJson(projectRoot), exp = _readConfigJson.exp, pkg = _readConfigJson.pkg, rootConfig = _readConfigJson.rootConfig, dynamicConfigObjectType = _readConfigJson.dynamicConfigObjectType, staticConfigPath = _readConfigJson.staticConfigPath;
          exp = _objectSpread(_objectSpread({}, rootConfig.expo), options);
          rootConfig = _objectSpread(_objectSpread({}, rootConfig), {}, {
            expo: exp
          });

          if (!paths.staticConfigPath) {
            _context3.next = 9;
            break;
          }

          _context3.next = 7;
          return _regenerator.default.awrap(_jsonFile().default.writeAsync(paths.staticConfigPath, rootConfig, {
            json5: false
          }));

        case 7:
          _context3.next = 10;
          break;

        case 9:
          console.log('Failed to write to config: ', options);

        case 10:
          return _context3.abrupt("return", _objectSpread({
            exp: exp,
            pkg: pkg,
            rootConfig: rootConfig,
            staticConfigPath: staticConfigPath,
            dynamicConfigObjectType: dynamicConfigObjectType
          }, paths));

        case 11:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

var DEFAULT_BUILD_PATH = "web-build";

function getWebOutputPath() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _expo$web, _expo$web$build;

  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {
    return process.env.WEBPACK_BUILD_OUTPUT_PATH;
  }

  var expo = config.expo || config || {};
  return (expo === null || expo === void 0 ? void 0 : (_expo$web = expo.web) === null || _expo$web === void 0 ? void 0 : (_expo$web$build = _expo$web.build) === null || _expo$web$build === void 0 ? void 0 : _expo$web$build.output) || DEFAULT_BUILD_PATH;
}

function getNameFromConfig() {
  var exp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var appManifest = exp.expo || exp;
  var _appManifest$web = appManifest.web,
      web = _appManifest$web === void 0 ? {} : _appManifest$web;
  var appName = exp.displayName || appManifest.displayName || appManifest.name;
  var webName = web.name || appName;
  return {
    appName: appName,
    webName: webName
  };
}

function getDefaultTarget(projectRoot) {
  var _getConfig2 = getConfig(projectRoot, {
    skipSDKVersionRequirement: true
  }),
      exp = _getConfig2.exp;

  if (exp.sdkVersion && exp.sdkVersion !== 'UNVERSIONED' && _semver().default.lt(exp.sdkVersion, '37.0.0')) {
    return 'managed';
  }

  return isBareWorkflowProject(projectRoot) ? 'bare' : 'managed';
}

function isBareWorkflowProject(projectRoot) {
  var _getPackageJsonAndPat7 = getPackageJsonAndPath(projectRoot),
      _getPackageJsonAndPat8 = (0, _slicedToArray2.default)(_getPackageJsonAndPat7, 1),
      pkg = _getPackageJsonAndPat8[0];

  if (pkg.dependencies && pkg.dependencies.expokit) {
    return false;
  }

  var xcodeprojFiles = (0, _glob().sync)('ios/**/*.xcodeproj', {
    absolute: true,
    cwd: projectRoot
  });

  if (xcodeprojFiles.length) {
    return true;
  }

  var gradleFiles = (0, _glob().sync)('android/**/*.gradle', {
    absolute: true,
    cwd: projectRoot
  });

  if (gradleFiles.length) {
    return true;
  }

  return false;
}

function isDynamicFilePath(filePath) {
  return !!filePath.match(/\.[j|t]s$/);
}

function getProjectConfigDescription(projectRoot) {
  var paths = getConfigFilePaths(projectRoot);
  return getProjectConfigDescriptionWithPaths(projectRoot, paths);
}

function getProjectConfigDescriptionWithPaths(projectRoot, projectConfig) {
  if (projectConfig.dynamicConfigPath) {
    var relativeDynamicConfigPath = _path().default.relative(projectRoot, projectConfig.dynamicConfigPath);

    if (projectConfig.staticConfigPath) {
      return relativeDynamicConfigPath + " or " + _path().default.relative(projectRoot, projectConfig.staticConfigPath);
    }

    return relativeDynamicConfigPath;
  } else if (projectConfig.staticConfigPath) {
    return _path().default.relative(projectRoot, projectConfig.staticConfigPath);
  }

  return 'app.json';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
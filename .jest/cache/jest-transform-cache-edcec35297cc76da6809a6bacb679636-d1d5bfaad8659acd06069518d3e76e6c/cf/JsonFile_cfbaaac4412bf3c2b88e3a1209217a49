ec9b6a4cbab5b7622b54776881afb8aa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var code_frame_1 = require("@babel/code-frame");

var fs_1 = __importDefault(require("fs"));

var json5_1 = __importDefault(require("json5"));

var path_1 = __importDefault(require("path"));

var util_1 = require("util");

var write_file_atomic_1 = __importDefault(require("write-file-atomic"));

var JsonFileError_1 = __importStar(require("./JsonFileError"));

var writeFileAtomicAsync = util_1.promisify(write_file_atomic_1.default);
var DEFAULT_OPTIONS = {
  badJsonDefault: undefined,
  jsonParseErrorDefault: undefined,
  cantReadFileDefault: undefined,
  ensureDir: false,
  default: undefined,
  json5: false,
  space: 2,
  addNewLineAtEOF: true
};

var JsonFile = function () {
  function JsonFile(file) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, JsonFile);
    this.file = file;
    this.options = options;
  }

  (0, _createClass2.default)(JsonFile, [{
    key: "read",
    value: function read(options) {
      return _read(this.file, this._getOptions(options));
    }
  }, {
    key: "readAsync",
    value: function readAsync(options) {
      return _regenerator.default.async(function readAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", _readAsync(this.file, this._getOptions(options)));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "writeAsync",
    value: function writeAsync(object, options) {
      return _regenerator.default.async(function writeAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", _writeAsync(this.file, object, this._getOptions(options)));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "parseJsonString",
    value: function parseJsonString(json, options) {
      return _parseJsonString(json, options);
    }
  }, {
    key: "getAsync",
    value: function getAsync(key, defaultValue, options) {
      return _regenerator.default.async(function getAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", _getAsync(this.file, key, defaultValue, this._getOptions(options)));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "setAsync",
    value: function setAsync(key, value, options) {
      return _regenerator.default.async(function setAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", _setAsync(this.file, key, value, this._getOptions(options)));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "mergeAsync",
    value: function mergeAsync(sources, options) {
      return _regenerator.default.async(function mergeAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", _mergeAsync(this.file, sources, this._getOptions(options)));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "deleteKeyAsync",
    value: function deleteKeyAsync(key, options) {
      return _regenerator.default.async(function deleteKeyAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", _deleteKeyAsync(this.file, key, this._getOptions(options)));

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "deleteKeysAsync",
    value: function deleteKeysAsync(keys, options) {
      return _regenerator.default.async(function deleteKeysAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", _deleteKeysAsync(this.file, keys, this._getOptions(options)));

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "rewriteAsync",
    value: function rewriteAsync(options) {
      return _regenerator.default.async(function rewriteAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", _rewriteAsync(this.file, this._getOptions(options)));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "_getOptions",
    value: function _getOptions(options) {
      return _objectSpread(_objectSpread({}, this.options), options);
    }
  }]);
  return JsonFile;
}();

exports.default = JsonFile;
JsonFile.read = _read;
JsonFile.readAsync = _readAsync;
JsonFile.parseJsonString = _parseJsonString;
JsonFile.writeAsync = _writeAsync;
JsonFile.getAsync = _getAsync;
JsonFile.setAsync = _setAsync;
JsonFile.mergeAsync = _mergeAsync;
JsonFile.deleteKeyAsync = _deleteKeyAsync;
JsonFile.deleteKeysAsync = _deleteKeysAsync;
JsonFile.rewriteAsync = _rewriteAsync;

function _read(file, options) {
  var json;

  try {
    json = fs_1.default.readFileSync(file, 'utf8');
  } catch (error) {
    assertEmptyJsonString(json, file);
    var defaultValue = cantReadFileDefault(options);

    if (defaultValue === undefined) {
      throw new JsonFileError_1.default("Can't read JSON file: " + file, error, error.code, file);
    } else {
      return defaultValue;
    }
  }

  return _parseJsonString(json, options, file);
}

function _readAsync(file, options) {
  var json, defaultValue;
  return _regenerator.default.async(function _readAsync$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          _context9.prev = 0;
          _context9.next = 3;
          return _regenerator.default.awrap(fs_1.default.promises.readFile(file, 'utf8'));

        case 3:
          json = _context9.sent;
          _context9.next = 15;
          break;

        case 6:
          _context9.prev = 6;
          _context9.t0 = _context9["catch"](0);
          assertEmptyJsonString(json, file);
          defaultValue = cantReadFileDefault(options);

          if (!(defaultValue === undefined)) {
            _context9.next = 14;
            break;
          }

          throw new JsonFileError_1.default("Can't read JSON file: " + file, _context9.t0, _context9.t0.code);

        case 14:
          return _context9.abrupt("return", defaultValue);

        case 15:
          return _context9.abrupt("return", _parseJsonString(json, options));

        case 16:
        case "end":
          return _context9.stop();
      }
    }
  }, null, null, [[0, 6]], Promise);
}

function _parseJsonString(json, options, fileName) {
  assertEmptyJsonString(json, fileName);

  try {
    if (_getOption(options, 'json5')) {
      return json5_1.default.parse(json);
    } else {
      return JSON.parse(json);
    }
  } catch (e) {
    var defaultValue = jsonParseErrorDefault(options);

    if (defaultValue === undefined) {
      var location = locationFromSyntaxError(e, json);

      if (location) {
        var codeFrame = code_frame_1.codeFrameColumns(json, {
          start: location
        });
        e.codeFrame = codeFrame;
        e.message += "\n" + codeFrame;
      }

      throw new JsonFileError_1.default("Error parsing JSON: " + json, e, 'EJSONPARSE', fileName);
    } else {
      return defaultValue;
    }
  }
}

function _getAsync(file, key, defaultValue, options) {
  var object;
  return _regenerator.default.async(function _getAsync$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          _context10.next = 2;
          return _regenerator.default.awrap(_readAsync(file, options));

        case 2:
          object = _context10.sent;

          if (!(key in object)) {
            _context10.next = 5;
            break;
          }

          return _context10.abrupt("return", object[key]);

        case 5:
          if (!(defaultValue === undefined)) {
            _context10.next = 7;
            break;
          }

          throw new JsonFileError_1.default("No value at key path \"" + key + "\" in JSON object from: " + file);

        case 7:
          return _context10.abrupt("return", defaultValue);

        case 8:
        case "end":
          return _context10.stop();
      }
    }
  }, null, null, null, Promise);
}

function _writeAsync(file, object, options) {
  var space, json5, addNewLineAtEOF, json, data;
  return _regenerator.default.async(function _writeAsync$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          if (!(options === null || options === void 0 ? void 0 : options.ensureDir)) {
            _context11.next = 3;
            break;
          }

          _context11.next = 3;
          return _regenerator.default.awrap(fs_1.default.promises.mkdir(path_1.default.dirname(file), {
            recursive: true
          }));

        case 3:
          space = _getOption(options, 'space');
          json5 = _getOption(options, 'json5');
          addNewLineAtEOF = _getOption(options, 'addNewLineAtEOF');
          _context11.prev = 6;

          if (json5) {
            json = json5_1.default.stringify(object, null, space);
          } else {
            json = JSON.stringify(object, null, space);
          }

          _context11.next = 13;
          break;

        case 10:
          _context11.prev = 10;
          _context11.t0 = _context11["catch"](6);
          throw new JsonFileError_1.default("Couldn't JSON.stringify object for file: " + file, _context11.t0);

        case 13:
          data = addNewLineAtEOF ? json + "\n" : json;
          _context11.next = 16;
          return _regenerator.default.awrap(writeFileAtomicAsync(file, data, {}));

        case 16:
          return _context11.abrupt("return", object);

        case 17:
        case "end":
          return _context11.stop();
      }
    }
  }, null, null, [[6, 10]], Promise);
}

function _setAsync(file, key, value, options) {
  var object;
  return _regenerator.default.async(function _setAsync$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          _context12.next = 2;
          return _regenerator.default.awrap(_readAsync(file, options));

        case 2:
          object = _context12.sent;
          return _context12.abrupt("return", _writeAsync(file, _objectSpread(_objectSpread({}, object), {}, (0, _defineProperty2.default)({}, key, value)), options));

        case 4:
        case "end":
          return _context12.stop();
      }
    }
  }, null, null, null, Promise);
}

function _mergeAsync(file, sources, options) {
  var object;
  return _regenerator.default.async(function _mergeAsync$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          _context13.next = 2;
          return _regenerator.default.awrap(_readAsync(file, options));

        case 2:
          object = _context13.sent;

          if (Array.isArray(sources)) {
            Object.assign.apply(Object, [object].concat((0, _toConsumableArray2.default)(sources)));
          } else {
            (0, _extends2.default)(object, sources);
          }

          return _context13.abrupt("return", _writeAsync(file, object, options));

        case 5:
        case "end":
          return _context13.stop();
      }
    }
  }, null, null, null, Promise);
}

function _deleteKeyAsync(file, key, options) {
  return _regenerator.default.async(function _deleteKeyAsync$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          return _context14.abrupt("return", _deleteKeysAsync(file, [key], options));

        case 1:
        case "end":
          return _context14.stop();
      }
    }
  }, null, null, null, Promise);
}

function _deleteKeysAsync(file, keys, options) {
  var object, didDelete, i, key;
  return _regenerator.default.async(function _deleteKeysAsync$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          _context15.next = 2;
          return _regenerator.default.awrap(_readAsync(file, options));

        case 2:
          object = _context15.sent;
          didDelete = false;

          for (i = 0; i < keys.length; i++) {
            key = keys[i];

            if (object.hasOwnProperty(key)) {
              delete object[key];
              didDelete = true;
            }
          }

          if (!didDelete) {
            _context15.next = 7;
            break;
          }

          return _context15.abrupt("return", _writeAsync(file, object, options));

        case 7:
          return _context15.abrupt("return", object);

        case 8:
        case "end":
          return _context15.stop();
      }
    }
  }, null, null, null, Promise);
}

function _rewriteAsync(file, options) {
  var object;
  return _regenerator.default.async(function _rewriteAsync$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          _context16.next = 2;
          return _regenerator.default.awrap(_readAsync(file, options));

        case 2:
          object = _context16.sent;
          return _context16.abrupt("return", _writeAsync(file, object, options));

        case 4:
        case "end":
          return _context16.stop();
      }
    }
  }, null, null, null, Promise);
}

function jsonParseErrorDefault() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (options.jsonParseErrorDefault === undefined) {
    return options.default;
  } else {
    return options.jsonParseErrorDefault;
  }
}

function cantReadFileDefault() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (options.cantReadFileDefault === undefined) {
    return options.default;
  } else {
    return options.cantReadFileDefault;
  }
}

function _getOption(options, field) {
  if (options) {
    if (options[field] !== undefined) {
      return options[field];
    }
  }

  return DEFAULT_OPTIONS[field];
}

function locationFromSyntaxError(error, sourceString) {
  if ('lineNumber' in error && 'columnNumber' in error) {
    return {
      line: error.lineNumber,
      column: error.columnNumber
    };
  }

  var match = /at position (\d+)/.exec(error.message);

  if (match) {
    var index = parseInt(match[1], 10);
    var lines = sourceString.slice(0, index + 1).split('\n');
    return {
      line: lines.length,
      column: lines[lines.length - 1].length
    };
  }

  return null;
}

function assertEmptyJsonString(json, file) {
  if ((json === null || json === void 0 ? void 0 : json.trim()) === '') {
    throw new JsonFileError_1.EmptyJsonFileError(file);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
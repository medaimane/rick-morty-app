{"version":3,"sources":["../src/getConfig.ts"],"names":["error","configFile","config","readConfigFile","ConfigError","json5"],"mappings":";;;;;;;;AAAA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,GAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAAA,EAAA,GAAA,GAAA,eAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,YAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,gBAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAIA,SAAA,cAAA,CAAA,UAAA,EAAA,OAAA,EAAiG;AAE/F,MAAI,CAAC,CAAA,GAAA,GAAA,GAAA,UAAA,EAAL,UAAK,CAAL,EAA6B;AAC3B,WAAA,IAAA;AACD;;AACD,MAAI;AACF,WAAO,CAAA,GAAA,WAAA,GAAA,UAAA,EAAA,UAAA,EAAP,OAAO,CAAP;AADF,GAAA,CAEE,OAAA,KAAA,EAAc;AAEdA,IAAAA,KAAK,CAALA,aAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAK,CAALA,OAAAA,qCAAgDC,UAAhDD,aAAkEA,KAAK,CAAvEA,OAAAA;AACA,UAAA,KAAA;AACD;AACF;;AAEM,SAAA,gBAAA,CAAA,UAAA,EAAA,OAAA,EAA4F;AACjG,MAAME,MAAM,GAAGC,cAAc,CAAA,UAAA,EAA7B,OAA6B,CAA7B;;AACA,MAAA,MAAA,EAAY;AAEV,WAAA,MAAA;AAJ+F;;AAQjG,QAAM,KAAIC,OAAAA,GAAJ,WAAA,iCAAA,UAAA,EAAN,gBAAM,CAAN;AACD;;AAEM,SAAA,eAAA,CAAA,UAAA,EAAyE;AAC9E,MAAMF,MAAM,GAAG,SAAA,GAAA,OAAA,CAAA,IAAA,CAAA,UAAA,EAA0B;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAA1B,CAAf;;AACA,MAAA,MAAA,EAAY;AACV,WAAA,MAAA;AACD;;AACD,QAAM,KAAID,OAAAA,GAAJ,WAAA,iCAAA,UAAA,EAAN,gBAAM,CAAN;AACD","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { existsSync } from 'fs';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { DynamicConfigResults, evalConfig } from './evalConfig';\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction readConfigFile(configFile: string, context: ConfigContext): null | DynamicConfigResults {\n  // If the file doesn't exist then we should skip it and continue searching.\n  if (!existsSync(configFile)) {\n    return null;\n  }\n  try {\n    return evalConfig(configFile, context);\n  } catch (error) {\n    // @ts-ignore\n    error.isConfigError = true;\n    error.message = `Error reading Expo config at ${configFile}:\\n\\n${error.message}`;\n    throw error;\n  }\n}\n\nexport function getDynamicConfig(configPath: string, request: ConfigContext): DynamicConfigResults {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    // The config must be serialized and evaluated ahead of time so the spawned process can send it over.\n    return config;\n  }\n  // TODO: It seems this is only thrown if the file cannot be found (which may never happen).\n  // If so we should throw a more helpful error.\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return config as any;\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n"]}
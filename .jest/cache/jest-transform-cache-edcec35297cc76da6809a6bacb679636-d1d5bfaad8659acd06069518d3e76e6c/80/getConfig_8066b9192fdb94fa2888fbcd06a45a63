226dbc1c96be5940f69d05e5b38303b1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDynamicConfig = getDynamicConfig;
exports.getStaticConfig = getStaticConfig;

function _jsonFile() {
  var data = _interopRequireDefault(require("@expo/json-file"));

  _jsonFile = function _jsonFile() {
    return data;
  };

  return data;
}

function _fs() {
  var data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _Errors() {
  var data = require("./Errors");

  _Errors = function _Errors() {
    return data;
  };

  return data;
}

function _evalConfig() {
  var data = require("./evalConfig");

  _evalConfig = function _evalConfig() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function readConfigFile(configFile, context) {
  if (!(0, _fs().existsSync)(configFile)) {
    return null;
  }

  try {
    return (0, _evalConfig().evalConfig)(configFile, context);
  } catch (error) {
    error.isConfigError = true;
    error.message = "Error reading Expo config at " + configFile + ":\n\n" + error.message;
    throw error;
  }
}

function getDynamicConfig(configPath, request) {
  var config = readConfigFile(configPath, request);

  if (config) {
    return config;
  }

  throw new (_Errors().ConfigError)("Failed to read config at: " + configPath, 'INVALID_CONFIG');
}

function getStaticConfig(configPath) {
  var config = _jsonFile().default.read(configPath, {
    json5: true
  });

  if (config) {
    return config;
  }

  throw new (_Errors().ConfigError)("Failed to read config at: " + configPath, 'INVALID_CONFIG');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRDb25maWcudHMiXSwibmFtZXMiOlsiZXJyb3IiLCJjb25maWdGaWxlIiwiY29uZmlnIiwicmVhZENvbmZpZ0ZpbGUiLCJDb25maWdFcnJvciIsImpzb241Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQUEsU0FBQSxHQUFBO0FBQUEsTUFBQSxJQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQSxDQUFBOztBQUFBLEVBQUEsU0FBQSxHQUFBLHFCQUFBO0FBQUEsV0FBQSxJQUFBO0FBQUEsR0FBQTs7QUFBQSxTQUFBLElBQUE7QUFBQTs7QUFDQSxTQUFBLEdBQUEsR0FBQTtBQUFBLE1BQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUE7O0FBQUEsRUFBQSxHQUFBLEdBQUEsZUFBQTtBQUFBLFdBQUEsSUFBQTtBQUFBLEdBQUE7O0FBQUEsU0FBQSxJQUFBO0FBQUE7O0FBR0EsU0FBQSxPQUFBLEdBQUE7QUFBQSxNQUFBLElBQUEsR0FBQSxPQUFBLFlBQUE7O0FBQUEsRUFBQSxPQUFBLEdBQUEsbUJBQUE7QUFBQSxXQUFBLElBQUE7QUFBQSxHQUFBOztBQUFBLFNBQUEsSUFBQTtBQUFBOztBQUNBLFNBQUEsV0FBQSxHQUFBO0FBQUEsTUFBQSxJQUFBLEdBQUEsT0FBQSxnQkFBQTs7QUFBQSxFQUFBLFdBQUEsR0FBQSx1QkFBQTtBQUFBLFdBQUEsSUFBQTtBQUFBLEdBQUE7O0FBQUEsU0FBQSxJQUFBO0FBQUE7Ozs7Ozs7O0FBSUEsU0FBQSxjQUFBLENBQUEsVUFBQSxFQUFBLE9BQUEsRUFBaUc7QUFFL0YsTUFBSSxDQUFDLENBQUEsR0FBQSxHQUFBLEdBQUEsVUFBQSxFQUFMLFVBQUssQ0FBTCxFQUE2QjtBQUMzQixXQUFBLElBQUE7QUFDRDs7QUFDRCxNQUFJO0FBQ0YsV0FBTyxDQUFBLEdBQUEsV0FBQSxHQUFBLFVBQUEsRUFBQSxVQUFBLEVBQVAsT0FBTyxDQUFQO0FBREYsR0FBQSxDQUVFLE9BQUEsS0FBQSxFQUFjO0FBRWRBLElBQUFBLEtBQUssQ0FBTEEsYUFBQUEsR0FBQUEsSUFBQUE7QUFDQUEsSUFBQUEsS0FBSyxDQUFMQSxPQUFBQSxxQ0FBZ0RDLFVBQWhERCxhQUFrRUEsS0FBSyxDQUF2RUEsT0FBQUE7QUFDQSxVQUFBLEtBQUE7QUFDRDtBQUNGOztBQUVNLFNBQUEsZ0JBQUEsQ0FBQSxVQUFBLEVBQUEsT0FBQSxFQUE0RjtBQUNqRyxNQUFNRSxNQUFNLEdBQUdDLGNBQWMsQ0FBQSxVQUFBLEVBQTdCLE9BQTZCLENBQTdCOztBQUNBLE1BQUEsTUFBQSxFQUFZO0FBRVYsV0FBQSxNQUFBO0FBSitGOztBQVFqRyxRQUFNLEtBQUlDLE9BQUFBLEdBQUosV0FBQSxpQ0FBQSxVQUFBLEVBQU4sZ0JBQU0sQ0FBTjtBQUNEOztBQUVNLFNBQUEsZUFBQSxDQUFBLFVBQUEsRUFBeUU7QUFDOUUsTUFBTUYsTUFBTSxHQUFHLFNBQUEsR0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLFVBQUEsRUFBMEI7QUFBRUcsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBMUIsQ0FBZjs7QUFDQSxNQUFBLE1BQUEsRUFBWTtBQUNWLFdBQUEsTUFBQTtBQUNEOztBQUNELFFBQU0sS0FBSUQsT0FBQUEsR0FBSixXQUFBLGlDQUFBLFVBQUEsRUFBTixnQkFBTSxDQUFOO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSnNvbkZpbGUgZnJvbSAnQGV4cG8vanNvbi1maWxlJztcbmltcG9ydCB7IGV4aXN0c1N5bmMgfSBmcm9tICdmcyc7XG5cbmltcG9ydCB7IEFwcEpTT05Db25maWcsIENvbmZpZ0NvbnRleHQsIEV4cG9Db25maWcgfSBmcm9tICcuL0NvbmZpZy50eXBlcyc7XG5pbXBvcnQgeyBDb25maWdFcnJvciB9IGZyb20gJy4vRXJyb3JzJztcbmltcG9ydCB7IER5bmFtaWNDb25maWdSZXN1bHRzLCBldmFsQ29uZmlnIH0gZnJvbSAnLi9ldmFsQ29uZmlnJztcblxuLy8gV2UgY2Fubm90IHVzZSBhc3luYyBjb25maWcgcmVzb2x1dGlvbiByaWdodCBub3cgYmVjYXVzZSBOZXh0LmpzIGRvZXNuJ3Qgc3VwcG9ydCBhc3luYyBjb25maWdzLlxuLy8gSWYgdGhleSBkb24ndCBhZGQgc3VwcG9ydCBmb3IgYXN5bmMgV2VicGFjayBjb25maWdzIHRoZW4gd2UgbWF5IG5lZWQgdG8gcHVsbCBzdXBwb3J0IGZvciBOZXh0LmpzLlxuZnVuY3Rpb24gcmVhZENvbmZpZ0ZpbGUoY29uZmlnRmlsZTogc3RyaW5nLCBjb250ZXh0OiBDb25maWdDb250ZXh0KTogbnVsbCB8IER5bmFtaWNDb25maWdSZXN1bHRzIHtcbiAgLy8gSWYgdGhlIGZpbGUgZG9lc24ndCBleGlzdCB0aGVuIHdlIHNob3VsZCBza2lwIGl0IGFuZCBjb250aW51ZSBzZWFyY2hpbmcuXG4gIGlmICghZXhpc3RzU3luYyhjb25maWdGaWxlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2YWxDb25maWcoY29uZmlnRmlsZSwgY29udGV4dCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGVycm9yLmlzQ29uZmlnRXJyb3IgPSB0cnVlO1xuICAgIGVycm9yLm1lc3NhZ2UgPSBgRXJyb3IgcmVhZGluZyBFeHBvIGNvbmZpZyBhdCAke2NvbmZpZ0ZpbGV9OlxcblxcbiR7ZXJyb3IubWVzc2FnZX1gO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREeW5hbWljQ29uZmlnKGNvbmZpZ1BhdGg6IHN0cmluZywgcmVxdWVzdDogQ29uZmlnQ29udGV4dCk6IER5bmFtaWNDb25maWdSZXN1bHRzIHtcbiAgY29uc3QgY29uZmlnID0gcmVhZENvbmZpZ0ZpbGUoY29uZmlnUGF0aCwgcmVxdWVzdCk7XG4gIGlmIChjb25maWcpIHtcbiAgICAvLyBUaGUgY29uZmlnIG11c3QgYmUgc2VyaWFsaXplZCBhbmQgZXZhbHVhdGVkIGFoZWFkIG9mIHRpbWUgc28gdGhlIHNwYXduZWQgcHJvY2VzcyBjYW4gc2VuZCBpdCBvdmVyLlxuICAgIHJldHVybiBjb25maWc7XG4gIH1cbiAgLy8gVE9ETzogSXQgc2VlbXMgdGhpcyBpcyBvbmx5IHRocm93biBpZiB0aGUgZmlsZSBjYW5ub3QgYmUgZm91bmQgKHdoaWNoIG1heSBuZXZlciBoYXBwZW4pLlxuICAvLyBJZiBzbyB3ZSBzaG91bGQgdGhyb3cgYSBtb3JlIGhlbHBmdWwgZXJyb3IuXG4gIHRocm93IG5ldyBDb25maWdFcnJvcihgRmFpbGVkIHRvIHJlYWQgY29uZmlnIGF0OiAke2NvbmZpZ1BhdGh9YCwgJ0lOVkFMSURfQ09ORklHJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNDb25maWcoY29uZmlnUGF0aDogc3RyaW5nKTogQXBwSlNPTkNvbmZpZyB8IEV4cG9Db25maWcge1xuICBjb25zdCBjb25maWcgPSBKc29uRmlsZS5yZWFkKGNvbmZpZ1BhdGgsIHsganNvbjU6IHRydWUgfSk7XG4gIGlmIChjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnIGFzIGFueTtcbiAgfVxuICB0aHJvdyBuZXcgQ29uZmlnRXJyb3IoYEZhaWxlZCB0byByZWFkIGNvbmZpZyBhdDogJHtjb25maWdQYXRofWAsICdJTlZBTElEX0NPTkZJRycpO1xufVxuIl19
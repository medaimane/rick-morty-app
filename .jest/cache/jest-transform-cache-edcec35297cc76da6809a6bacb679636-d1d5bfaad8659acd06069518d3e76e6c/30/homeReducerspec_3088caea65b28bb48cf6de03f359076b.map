{"version":3,"sources":["homeReducer.spec.ts"],"names":["describe","it","expect","initialHomeState","toEqual","objectContaining","characters","viewState","ViewState","Loading","action","HomeActions","fetchCharacter","success","charactersStub","state","newState","cases","expectedViewState","Empty","Data","forEach","toBe","failure","Error"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAMAA,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC5BC,EAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAC5BC,IAAAA,MAAM,CAACC,6BAAD,CAAN,CAAyBC,OAAzB,CACEF,MAAM,CAACG,gBAAP,CAAmC;AACjCC,MAAAA,UAAU,EAAE,EADqB;AAEjCC,MAAAA,SAAS,EAAEC,qBAAUC;AAFY,KAAnC,CADF;AAMD,GAPC,CAAF;AASAT,EAAAA,QAAQ,CAAC,oDAAD,EAAuD,YAAM;AACnEC,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAChD,UAAMS,MAAM,GAAGC,yBAAYC,cAAZ,CAA2BC,OAA3B,CAAmCC,8BAAnC,CAAf;;AACA,UAAMC,KAAgB,mCACjBZ,6BADiB;AAEpBG,QAAAA,UAAU,EAAE;AAFQ,QAAtB;;AAKA,UAAMU,QAAQ,GAAG,8BAAID,KAAJ,EAAWL,MAAX,CAAjB;AAEAR,MAAAA,MAAM,CAACc,QAAQ,CAACV,UAAV,CAAN,CAA4BF,OAA5B,CAAoCU,8BAApC;AACD,KAVC,CAAF;AAYAb,IAAAA,EAAE,CAAC,oEAAD,EAAuE,YAAM;AAC7E,UAAMgB,KAAK,GAAG,CACZ;AACEX,QAAAA,UAAU,EAAE,EADd;AAEEY,QAAAA,iBAAiB,EAAEV,qBAAUW;AAF/B,OADY,EAKZ;AACEb,QAAAA,UAAU,EAAEQ,8BADd;AAEEI,QAAAA,iBAAiB,EAAEV,qBAAUY;AAF/B,OALY,CAAd;AAWAH,MAAAA,KAAK,CAACI,OAAN,CAAc,gBAAqC;AAAA,YAAnCf,UAAmC,QAAnCA,UAAmC;AAAA,YAAvBY,iBAAuB,QAAvBA,iBAAuB;;AACjD,YAAMR,MAAM,GAAGC,yBAAYC,cAAZ,CAA2BC,OAA3B,CAAmCP,UAAnC,CAAf;;AACA,YAAMS,KAAgB,mCACjBZ,6BADiB;AAEpBI,UAAAA,SAAS,EAAEC,qBAAUC;AAFD,UAAtB;;AAKA,YAAMO,QAAQ,GAAG,8BAAID,KAAJ,EAAWL,MAAX,CAAjB;AAEAR,QAAAA,MAAM,CAACc,QAAQ,CAACT,SAAV,CAAN,CAA2Be,IAA3B,CAAgCJ,iBAAhC;AACD,OAVD;AAWD,KAvBC,CAAF;AAwBD,GArCO,CAAR;AAuCAlB,EAAAA,QAAQ,CAAC,oDAAD,EAAuD,YAAM;AACnEC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,UAAMc,KAAgB,mCACjBZ,6BADiB;AAEpBI,QAAAA,SAAS,EAAEC,qBAAUY;AAFD,QAAtB;;AAKA,UAAMJ,QAAQ,GAAG,8BAAID,KAAJ,EAAWJ,yBAAYC,cAAZ,CAA2BW,OAA3B,EAAX,CAAjB;AAEArB,MAAAA,MAAM,CAACc,QAAQ,CAACT,SAAV,CAAN,CAA2Be,IAA3B,CAAgCd,qBAAUgB,KAA1C;AACD,KATC,CAAF;AAUD,GAXO,CAAR;AAYD,CA7DO,CAAR","sourcesContent":["import {charactersStub} from '../stubs/charactersStub';\nimport {ViewState} from '../../src/store/ViewState';\nimport {HomeActions} from '../../src/screens/HomeScreen/HomeActions';\nimport {\n  homeReducer as sut,\n  HomeState,\n  initialHomeState,\n} from '../../src/screens/HomeScreen/homeReducer';\n\ndescribe('homeReducer', () => {\n  it('has initial state', () => {\n    expect(initialHomeState).toEqual(\n      expect.objectContaining<HomeState>({\n        characters: [],\n        viewState: ViewState.Loading,\n      })\n    );\n  });\n\n  describe('when HOME/FETCH_CHARACTERS_SUCCESS action received', () => {\n    it('sets carachters to the action payload', () => {\n      const action = HomeActions.fetchCharacter.success(charactersStub);\n      const state: HomeState = {\n        ...initialHomeState,\n        characters: [],\n      };\n\n      const newState = sut(state, action);\n\n      expect(newState.characters).toEqual(charactersStub);\n    });\n\n    it('sets viewState to Empty when charaters are empty otherwise to Data', () => {\n      const cases = [\n        {\n          characters: [],\n          expectedViewState: ViewState.Empty,\n        },\n        {\n          characters: charactersStub,\n          expectedViewState: ViewState.Data,\n        },\n      ];\n\n      cases.forEach(({characters, expectedViewState}) => {\n        const action = HomeActions.fetchCharacter.success(characters);\n        const state: HomeState = {\n          ...initialHomeState,\n          viewState: ViewState.Loading,\n        };\n\n        const newState = sut(state, action);\n\n        expect(newState.viewState).toBe(expectedViewState);\n      });\n    });\n  });\n\n  describe('when HOME/FETCH_CHARACTERS_FAILURE action received', () => {\n    it('sets viewState to Error', () => {\n      const state: HomeState = {\n        ...initialHomeState,\n        viewState: ViewState.Data,\n      };\n\n      const newState = sut(state, HomeActions.fetchCharacter.failure());\n\n      expect(newState.viewState).toBe(ViewState.Error);\n    });\n  });\n});\n"]}